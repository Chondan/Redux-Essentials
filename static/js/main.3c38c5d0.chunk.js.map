{"version":3,"sources":["api/client.js","features/notifications/notificationsSlice.js","app/Navbar.js","features/users/usersSlice.js","features/posts/postsSlice.js","features/posts/AddPostForm.js","features/posts/PostAuthor.js","features/posts/TimeAgo.js","features/posts/ReactionButtons.js","features/posts/PostsList.js","features/posts/SinglePagePost.js","customHooks/useInputForm.js","features/posts/EditPostForm.js","features/users/UsersList.js","features/users/UserPage.js","features/notifications/NotificationsList.js","App.js","api/server.js","app/store.js","index.js"],"names":["client","endpoint","a","body","customConfig","headers","config","method","JSON","stringify","window","fetch","response","json","data","ok","Error","statusText","Promise","reject","message","get","post","notificationsAdapter","createEntityAdapter","sortComparer","b","date","localeCompare","initialState","getInitialState","fetchNotifications","createAsyncThunk","_","getState","allNotifications","selectAllNotifications","latestNotification","latestTimeStamp","notifications","notificationsSlice","createSlice","name","reducers","allNotificationsRead","state","action","Object","values","entities","forEach","notification","read","extraReducers","fulfilled","isNew","upsertMany","payload","reducer","actions","getSelectors","selectAll","Navbar","unreadNoificationsBadge","dispatch","useDispatch","numUnreadNotifications","useSelector","filter","length","className","to","onClick","usersAdapter","fetchUsers","users","setAll","selectAllUsers","selectUserById","selectById","reactions","keys","thumbsUp","hooray","heart","rocket","eyes","reduce","nextObj","key","postsAdapter","status","error","fetchPosts","posts","addNewPost","initialPost","postsSlice","postAdded","push","prepare","title","content","userId","id","nanoid","Date","toISOString","user","postUpdated","existingPost","reactionAdded","postId","emojiName","pending","rejected","addOne","selectAllPosts","selectPostById","selectPostIds","selectIds","selectPostsByUser","createSelector","AddPostForm","useState","setTitle","setContent","setUserId","userOptions","map","value","cansave","Boolean","addRequestStatus","setAddRequestStatus","onAddPostClicked","resultAction","unwrapResult","console","htmlFor","type","onChange","e","target","disabled","PostAuthor","TimeAgo","timeAgo","timestamp","parseISO","timePeriod","formatDistanceToNow","reactionEmoji","ReactionButtons","reactionButtons","entries","emoji","Post","substring","React","memo","PostsList","orderedPosts","postStatus","useEffect","SinglePagePost","match","params","history","useHistory","style","cursor","color","goBack","useInputForm","initialValue","input","setInput","EditPostForm","onTitleChanged","onContentChanged","preventDefault","UsersList","renderedUsers","UserPage","renderedPostsTitle","NotificationsList","renderedNotifications","find","notificationClassname","classnames","new","App","seedDate","exact","path","render","component","store","configureStore","postsReducer","usersReducer","notificationsReducer","IdSerializer","RestSerializer","extend","serializeIds","rng","seedrandom","randomSeedString","localStorage","getItem","getRandomInt","min","max","Math","ceil","floor","setItem","setRandom","faker","seed","getTime","randomFromArray","array","notificationTemplates","Server","routes","this","namespace","timing","resource","server","schema","req","normalizedRequestAttrs","create","comments","pastDate","numNotifications","now","queryParams","since","valueOf","setMinutes","getMinutes","Array","db","template","between","models","Model","hasMany","belongsTo","comment","factories","Factory","firstName","lastName","findName","username","internet","userName","afterCreate","createList","sentence","recent","article","association","past","text","paragraph","serializers","seeds","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3c38c5d0.chunk.js","sourcesContent":["// A tiny wrapper around fetch(), borrowed from\n// https://kentcdodds.com/blog/replace-axios-with-a-simple-custom-fetch-wrapper\n\nexport async function client(endpoint, { body, ...customConfig } = {}) {\n  const headers = { 'Content-Type': 'application/json' }\n\n  const config = {\n    method: body ? 'POST' : 'GET',\n    ...customConfig,\n    headers: {\n      ...headers,\n      ...customConfig.headers,\n    },\n  }\n\n  if (body) {\n    config.body = JSON.stringify(body)\n  }\n\n  let data\n  try {\n    const response = await window.fetch(endpoint, config)\n    data = await response.json()\n    if (response.ok) {\n      return data\n    }\n    throw new Error(response.statusText)\n  } catch (err) {\n    return Promise.reject(err.message ? err.message : data)\n  }\n}\n\nclient.get = function (endpoint, customConfig = {}) {\n  return client(endpoint, { ...customConfig, method: 'GET' })\n}\n\nclient.post = function (endpoint, body, customConfig = {}) {\n  return client(endpoint, { ...customConfig, body })\n}\n","import { createSlice, createAsyncThunk, createEntityAdapter } from '@reduxjs/toolkit';\nimport { client } from '../../api/client';\n\nconst notificationsAdapter = createEntityAdapter({\n  sortComparer: (a, b) => b.date.localeCompare(a.date)\n});\n\nconst initialState = notificationsAdapter.getInitialState();\n\nexport const fetchNotifications = createAsyncThunk(\n  \"notifications/fetchNotifications\",\n  async (_, { getState }) => {\n    const allNotifications = selectAllNotifications(getState());\n    const [latestNotification] = allNotifications;\n    const latestTimeStamp = latestNotification ? latestNotification.date : \"\";\n    const response = await client.get(\n      `/fakeApi/notifications?since=${latestTimeStamp}`\n    );\n    return response.notifications;\n  }\n)\n\nconst notificationsSlice = createSlice({\n  name: \"notifications\",\n  initialState,\n  reducers: {\n    allNotificationsRead(state, action) {\n      Object.values(state.entities).forEach(notification => {\n        notification.read = true\n      });\n    }\n  },\n  extraReducers: {\n    [fetchNotifications.fulfilled]: (state, action) => {\n      Object.values(state.entities).forEach(notification => {\n        // Any notifications we've read are no longer new\n        notification.isNew = !notification.read;\n      })\n      notificationsAdapter.upsertMany(state, action.payload);\n    }\n  }\n});\n\nconst { reducer, actions } = notificationsSlice;\nexport default reducer;\nexport const { allNotificationsRead } = actions;\nexport const {\n  selectAll: selectAllNotifications\n} = notificationsAdapter.getSelectors(state => state.notifications);","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { fetchNotifications, selectAllNotifications } from '../features/notifications/notificationsSlice';\n\nexport const Navbar = () => {\n  const dispatch = useDispatch();\n\n  const notifications = useSelector(selectAllNotifications);\n  const numUnreadNotifications = notifications.filter(notification => !notification.read).length;\n\n  let unreadNoificationsBadge;\n  if (numUnreadNotifications > 0) {\n    unreadNoificationsBadge = (\n      <span className=\"badge\">{numUnreadNotifications}</span>\n    );\n  }\n  \n  const fetchNewNotifications = () => {\n    dispatch(fetchNotifications());\n  }\n  return (\n    <nav>\n      <section>\n        <h1>Redux Essentials Example</h1>\n\n        <div className=\"navContent\">\n          <div className=\"navLinks\">\n            <Link to=\"/Redux-Essentials\">Posts</Link>\n            <Link to=\"/Redux-Essentials/users\">Users</Link>\n            <Link to=\"/Redux-Essentials/notifications\">\n              Notifications {unreadNoificationsBadge}\n            </Link>\n          </div>\n          <button className=\"button notification-btn\" onClick={fetchNewNotifications}>\n            Refresh Notifications\n          </button>\n        </div>\n      </section>\n    </nav>\n  )\n}\n","import {\n  createAsyncThunk,\n  createEntityAdapter,\n  createSlice\n} from \"@reduxjs/toolkit\";\nimport { client } from \"../../api/client\";\n\nconst usersAdapter = createEntityAdapter();\nconst initialState = usersAdapter.getInitialState();\n\nconst fetchUsers = createAsyncThunk(\"users/fetchUsers\", async () => {\n  const response = await client.get(\"/fakeApi/users\");\n  return response.users;\n});\n\nconst usersSlice = createSlice({\n  name: \"users\",\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchUsers.fulfilled]: usersAdapter.setAll\n  }\n});\n\nconst { reducer } = usersSlice;\nexport default reducer;\nexport { fetchUsers };\n\nexport const {\n  selectAll: selectAllUsers,\n  selectById: selectUserById\n} = usersAdapter.getSelectors((state) => state.users);\n","import { createSlice, nanoid, createAsyncThunk, createSelector, createEntityAdapter } from '@reduxjs/toolkit';\nimport { client } from '../../api/client';\n\nconst reactionEmoji = {\n  thumbsUp: '👍',\n  hooray: '🎉',\n  heart: '❤️',\n  rocket: '🚀',\n  eyes: '👀'\n};\n\nconst reactions = Object.keys(reactionEmoji).reduce((nextObj, key) => {\n  nextObj[key] = 0;\n  return nextObj;\n}, {});\n\nconst postsAdapter = createEntityAdapter({\n  sortComparer: (a, b) => b.date.localeCompare(a.date)\n});\n\nconst initialState = postsAdapter.getInitialState({\n  status: \"idle\",\n  error: null\n});\n\nexport const fetchPosts = createAsyncThunk(\"posts/fetchPosts\", async () => {\n  const response = await client.get(\"/fakeApi/posts\");\n  return response.posts;\n});\n\nexport const addNewPost = createAsyncThunk(\n  \"posts/addNewPosts\",\n  async initialPost => {\n    const response = await client.post(\"/fakeApi/posts\", { post: initialPost });\n    return response.post;\n  }\n)\n\nconst postsSlice = createSlice({\n  name: \"posts\",\n  initialState,\n  reducers: {\n    postAdded: {\n      reducer(state, action) {\n        state.posts.push(action.payload);\n      },\n      prepare(title, content, userId) {\n        return {\n          payload: {\n            id: nanoid(),\n            title,\n            content,\n            date: new Date().toISOString(),\n            user: userId,\n            reactions\n          }\n        }\n      }\n    },\n    postUpdated: {\n      reducer(state, action) {\n        const { id, title, content, date } = action.payload;\n        const existingPost = state.entities[id];\n        existingPost.title = title;\n        existingPost.content = content;\n        existingPost.date = date;\n      },\n      prepare(id, title, content, date) {\n        return {\n          payload: {\n            id, title, content, date\n          }\n        }\n      }\n    },\n    reactionAdded: {\n      reducer(state, action) {\n        const { postId, emojiName } = action.payload;\n        const existingPost = state.entities[postId];\n        existingPost.reactions[emojiName]++;\n      },\n      prepare(postId, emojiName) {\n        return {\n          payload: {\n            postId, emojiName\n          }\n        }\n      }\n    },\n  },\n  extraReducers: {\n    [fetchPosts.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [fetchPosts.fulfilled]: (state, action) => {\n      state.status = \"succeeded\";\n      // Use the 'upsertMany` reducer as a mutating update utility\n      postsAdapter.upsertMany(state, action.payload);\n    },\n    [fetchPosts.rejected]: (state, action) => {\n      state.status = \"failed\";\n      state.error = action.error.message;\n    },\n    [addNewPost.fulfilled]: postsAdapter.addOne\n  }\n});\n\nconst { actions, reducer } = postsSlice;\nexport const { postAdded, postUpdated, reactionAdded } = actions;\nexport default reducer;\nexport const selectPostByUserId = (state, userId) => state.posts.posts.filter(post => post.user === userId);\n\n// Export the customized selectors for this adapter using 'getSelectors'\nexport const { \n  selectAll: selectAllPosts, \n  selectById: selectPostById,\n  selectIds: selectPostIds\n}  = postsAdapter.getSelectors(state => state.posts);\n\nexport const selectPostsByUser = createSelector(\n  [selectAllPosts, (state, userId) => userId],\n  (posts, userId) => posts.filter(post => post.user === userId)\n);","import { unwrapResult } from '@reduxjs/toolkit';\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectAllUsers } from '../users/usersSlice';\nimport { addNewPost } from './postsSlice';\n\n\nexport const AddPostForm = () => {\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const onTitleChange = e => setTitle(e.target.value);\n  const onContentChange = e => setContent(e.target.value);\n  const dispatch = useDispatch();\n  const [userId, setUserId] = useState('');\n  const onSelectAuthorChanged = e => setUserId(e.target.value);\n  const userOptions = useSelector(selectAllUsers).map(user => (\n    <option key={user.id} value={user.id}>{user.name}</option>\n  ));\n  const cansave = Boolean(title) && Boolean(content) && Boolean(userId);\n  const [addRequestStatus, setAddRequestStatus] = useState(\"idle\");\n  const onAddPostClicked = async () => {\n    if (cansave) {\n      try {\n        setAddRequestStatus(\"pending\");\n        const resultAction = await dispatch(addNewPost({ title, content, user: userId }));\n        unwrapResult(resultAction);\n        setTitle('');\n        setContent('');\n        setUserId('');\n      } catch (err) {\n        console.error(\"Failed to save the post: \", err);\n      } finally {\n        setAddRequestStatus(\"idle\");\n      }\n    }\n  }\n  return (\n    <section>\n      <form>\n        <label htmlFor=\"postTitle\">Title:</label>\n        <input \n          type=\"text\"\n          id=\"postTitle\"\n          name=\"postTitle\"\n          value={title}\n          onChange={onTitleChange}\n        />\n        <label htmlFor=\"postAuthor\">Post Author:</label>\n        <select value={userId} onChange={onSelectAuthorChanged}>\n          <option value=\"\"></option>\n          {userOptions}\n        </select>\n        <label htmlFor=\"postContent\">Content:</label>\n        <textarea \n          type=\"text\"\n          id=\"postContent\"\n          name=\"postContent\"\n          value={content}\n          onChange={onContentChange}\n        />\n        <button onClick={onAddPostClicked} type=\"button\" disabled={!cansave}>Add Post</button>\n        {' '}<span>{addRequestStatus}</span>\n      </form>\n    </section>\n  );\n}","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectUserById } from \"../users/usersSlice\";\n\nexport const PostAuthor = ({ post }) => {\n  const user = useSelector((state) => selectUserById(state, post.user));\n  return <span>By {user ? user.name : \"Unknown Author\"}</span>;\n};\n","import React from 'react';\nimport { parseISO, formatDistanceToNow } from 'date-fns';\n\nexport const TimeAgo = ({ timestamp }) => {\n  let timeAgo;\n  const date = parseISO(timestamp);\n  const timePeriod = formatDistanceToNow(date);\n  timeAgo = `${timePeriod} ago`;\n  return <span>{' '}<i>{timeAgo}</i></span>;\n}","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { reactionAdded } from './postsSlice';\n\nconst reactionEmoji = {\n  thumbsUp: '👍',\n  hooray: '🎉',\n  heart: '❤️',\n  rocket: '🚀',\n  eyes: '👀'\n}\n\nexport const ReactionButtons = ({ post }) => {\n  const dispatch = useDispatch();\n  const onReactionClicked = (postId, emojiName) => {\n    // post & name\n    dispatch(reactionAdded(postId, emojiName));\n  }\n  const reactionButtons = Object.entries(reactionEmoji).map(([name, emoji]) => (\n    <button \n      type=\"button\" \n      className=\"muted-button reaction-button\" \n      key={name}\n      onClick={() => onReactionClicked(post.id, name)}\n    >\n    {emoji} {post.reactions[name]}\n    </button>\n  ));\n  \n  return (\n    <div>{reactionButtons}</div>\n  );\n}","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { PostAuthor } from './PostAuthor';\nimport { TimeAgo } from './TimeAgo';\nimport { ReactionButtons } from './ReactionButtons';\nimport { fetchPosts, selectPostIds, selectPostById } from './postsSlice';\n\nlet Post = ({ postId }) => {\n  const post = useSelector(state => selectPostById(state, postId));\n  return (\n    <article>\n      <h3>{post.title}</h3>\n      <PostAuthor post={post} />\n      <TimeAgo timestamp={post.date} />\n      <p>{post.content.substring(0, 40)}{post.content.length > 40 ? \"...\" : \"\"}</p>\n      <ReactionButtons post={post} />\n      <Link to={`/Redux-Essentials/posts/${post.id}`}>View Post</Link>{' | '}\n      <Link to={`/Redux-Essentials/editPost/${post.id}`}>Edit Post</Link>\n    </article>\n  );\n}\nPost = React.memo(Post);\n\nexport const PostsList = () => {\n  const orderedPosts = useSelector(selectPostIds);\n\n  const dispatch = useDispatch();\n  const postStatus = useSelector(state => state.posts.status);\n  \n  useEffect(() => {\n    if (postStatus === \"idle\") {\n      dispatch(fetchPosts());\n    }\n  }, [postStatus, dispatch]);\n\n  const error = useSelector(state => state.posts.error);\n\n  let content;\n  if (postStatus === \"loading\") {\n    content = <div className=\"loading\">Loading...</div>;\n  } else if (postStatus === \"succeeded\") {\n    content = orderedPosts.map(postId => (\n      <Post key={postId} postId={postId} />\n    ));\n  } else if (postStatus === \"failed\") {\n    content = <div>{error}</div>;\n  }\n\n  return (\n    <section>\n      {content}\n    </section>\n  );\n}","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { PostAuthor } from './PostAuthor';\nimport { TimeAgo } from './TimeAgo';\nimport { selectPostById } from './postsSlice';\nimport { useHistory } from 'react-router-dom';\n\nexport const SinglePagePost = ({ match }) => {\n  const { postId } = match.params;\n  const post = useSelector(state => selectPostById(state, postId));\n  const history = useHistory();\n  if (!post) {\n    return (\n      <section>\n        <article>\n          <span>Post Not Found</span>\n        </article>\n      </section>\n    );\n  }\n  return (\n    <section>\n      <article>\n        <h3>{post.title}</h3>\n        <PostAuthor post={post} />\n        <TimeAgo timestamp={post.date} />\n        <p>{post.content}</p>\n        <span style={{ cursor: \"pointer\", color: \"blue\" }} onClick={() => history.goBack()}>Go back</span>\n      </article>\n    </section>\n  );\n}","import { useState } from 'react';\n\nexport const useInputForm = (initialValue) => {\n  const [input, setInput] = useState(initialValue || '');\n  const onInputChanged = e => setInput(e.target.value);\n  return [ input, onInputChanged ];\n}","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { useInputForm } from '../../customHooks/useInputForm';\nimport { postUpdated, selectPostById } from './postsSlice';\n\nexport const EditPostForm = ({ match }) => {\n  const { postId } = match.params;\n  const post = useSelector(state => selectPostById(state, postId));\n  const [ title, onTitleChanged ] = useInputForm(post.title);\n  const [ content, onContentChanged ] = useInputForm(post.content);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const onSavePostClicked = (e) => {\n    e.preventDefault();\n    dispatch(postUpdated(postId, title, content, new Date().toISOString()));\n    history.goBack();\n  }\n  const cansave = Boolean(title) && Boolean(content);\n  return (\n    <section>\n      <form>\n        <label htmlFor=\"postTitle\">Title:</label>\n        <input \n          type=\"text\"\n          id=\"postTitle\"\n          name=\"postTitle\"\n          value={title}\n          onChange={onTitleChanged}\n        />\n        <label htmlFor=\"postConten\">Content:</label>\n        <textarea \n          type=\"text\"\n          id=\"postContent\"\n          name=\"postContent\"\n          value={content}\n          onChange={onContentChanged}\n        />\n        <button onClick={onSavePostClicked} disabled={!cansave}>Save Post</button>\n      </form>\n    </section>\n  );\n}","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectAllUsers } from './usersSlice';\nimport { Link } from 'react-router-dom';\n\nexport const UsersList = () => {\n  const users =  useSelector(selectAllUsers);\n  \n  const renderedUsers = users.map(user => (\n    <li key={user.id}>\n      <Link to={`/Redux-Essentials/users/${user.id}`}>{user.name}</Link>\n    </li>\n  ))\n  \n  return (\n    <section>\n      <h2>Users</h2>\n      <ul>{renderedUsers}</ul>\n    </section>\n  );\n}","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectPostsByUser } from '../posts/postsSlice';\nimport { selectUserById } from './usersSlice';\nimport { Link } from 'react-router-dom';\n\nexport const UserPage = ({\n  match\n}) => {\n  const { userId } = match.params;\n  const user = useSelector(state => selectUserById(state, userId));\n  const userPosts = useSelector(state => selectPostsByUser(state, userId));\n\n  const renderedPostsTitle = userPosts.map(post => (\n    <li key={post.id}>\n      <Link to={`/Redux-Essentials/posts/${post.id}`}>{post.title}</Link>\n    </li>\n  ));\n  return (\n    <section>\n      <h2>{user.name}</h2>\n      <ul>{renderedPostsTitle}</ul>\n    </section>\n  );\n}","import { formatDistanceToNow, parseISO } from 'date-fns';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectAllUsers } from '../users/usersSlice';\nimport { selectAllNotifications, allNotificationsRead } from './notificationsSlice';\nimport classnames from 'classnames';\n\nexport const NotificationsList = () => {\n  const dispatch = useDispatch();\n  const notifications = useSelector(selectAllNotifications);\n  const users = useSelector(selectAllUsers);\n\n  useEffect(() => {\n    dispatch(allNotificationsRead());\n  });\n  \n  const renderedNotifications = notifications.map(notification => {\n    const date = parseISO(notification.date);\n    const timeAgo = formatDistanceToNow(date);\n    const user = users.find(user => user.id === notification.user) || {\n      name: \"Unknow User\"\n    }\n\n    const notificationClassname = classnames(\"notification\", {\n      new: notification.isNew\n    })\n\n    return (\n      <div key={notification.id} className={notificationClassname}>\n        <div>\n          <b>{user.name}</b> {notification.message}\n        </div>\n        <div title={notification.date}>\n          <i>{timeAgo}</i>\n        </div>\n      </div>\n    )\n  });\n  return (\n    <section>\n      <h2>Notifications</h2>\n      {renderedNotifications}\n    </section>\n  );\n}","import React from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom'\nimport { Navbar } from './app/Navbar'\nimport { AddPostForm } from './features/posts/AddPostForm';\nimport { PostsList } from './features/posts/PostsList';\nimport { SinglePagePost } from './features/posts/SinglePagePost';\nimport { EditPostForm } from './features/posts/EditPostForm';\nimport { UsersList } from './features/users/UsersList';\nimport { UserPage } from './features/users/UserPage';\nimport { NotificationsList } from './features/notifications/NotificationsList';\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <div className=\"App\">\n        <Switch>\n          <Route\n            exact\n            path=\"/Redux-Essentials\"\n            render={() => (\n              <>\n                <AddPostForm />\n                <PostsList />\n              </>\n            )}\n          />\n          <Route path=\"/Redux-Essentials/posts/:postId\" component={SinglePagePost} />\n          <Route path=\"/Redux-Essentials/editPost/:postId\" component={EditPostForm} />\n          <Route exact path=\"/Redux-Essentials/users\" component={UsersList} />\n          <Route path=\"/Redux-Essentials/users/:userId\" component={UserPage} />\n          <Route exact path=\"/Redux-Essentials/notifications\" component={NotificationsList} />\n          <Redirect to=\"/Redux-Essentials\" />\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","import {\n  Server,\n  Model,\n  Factory,\n  belongsTo,\n  hasMany,\n  association,\n  RestSerializer,\n} from 'miragejs'\n\nimport { nanoid } from '@reduxjs/toolkit'\n\nimport faker from 'faker'\nimport { sentence, paragraph, article, setRandom } from 'txtgen'\nimport { parseISO } from 'date-fns'\nimport seedrandom from 'seedrandom'\n\nconst IdSerializer = RestSerializer.extend({\n  serializeIds: 'always',\n})\n\n// Set up a seeded random number generator, so that we get\n// a consistent set of users / entries each time the page loads.\n// This can be reset by deleting this localStorage value,\n// or turned off by setting `useSeededRNG` to false.\nlet useSeededRNG = true\n\nlet rng = seedrandom()\n\nif (useSeededRNG) {\n  let randomSeedString = localStorage.getItem('randomTimestampSeed')\n  let seedDate\n\n  if (randomSeedString) {\n    seedDate = new Date(randomSeedString)\n  } else {\n    seedDate = new Date()\n    randomSeedString = seedDate.toISOString()\n    localStorage.setItem('randomTimestampSeed', randomSeedString)\n  }\n\n  rng = seedrandom(randomSeedString)\n  setRandom(rng)\n  faker.seed(seedDate.getTime())\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min)\n  max = Math.floor(max)\n  return Math.floor(rng() * (max - min + 1)) + min\n}\n\nconst randomFromArray = (array) => {\n  const index = getRandomInt(0, array.length - 1)\n  return array[index]\n}\n\nconst notificationTemplates = [\n  'poked you',\n  'says hi!',\n  `is glad we're friends`,\n  'sent you a gift',\n]\n\nnew Server({\n  routes() {\n    this.namespace = 'fakeApi'\n    this.timing = 2000\n\n    this.resource('users')\n    this.resource('posts')\n    this.resource('comments')\n\n    const server = this\n\n    this.post('/posts', function (schema, req) {\n      const data = this.normalizedRequestAttrs()\n      data.date = new Date().toISOString()\n      // Work around some odd behavior by Mirage that's causing an extra\n      // user entry to be created unexpectedly when we only supply a userId.\n      // It really want an entire Model passed in as data.user for some reason.\n      const user = schema.users.find(data.userId)\n      data.user = user\n\n      if (data.content === 'error') {\n        throw new Error('Could not save the post!')\n      }\n\n      const result = server.create('post', data)\n      return result\n    })\n\n    this.get('/posts/:postId/comments', (schema, req) => {\n      const post = schema.posts.find(req.params.postId)\n      return post.comments\n    })\n\n    this.get('/notifications', (schema, req) => {\n      const numNotifications = getRandomInt(1, 5)\n\n      let pastDate\n\n      const now = new Date()\n\n      if (req.queryParams.since) {\n        pastDate = parseISO(req.queryParams.since)\n      } else {\n        pastDate = new Date(now.valueOf())\n        pastDate.setMinutes(pastDate.getMinutes() - 15)\n      }\n\n      // Create N random notifications. We won't bother saving these\n      // in the DB - just generate a new batch and return them.\n      const notifications = [...Array(numNotifications)].map(() => {\n        const user = randomFromArray(schema.db.users)\n        const template = randomFromArray(notificationTemplates)\n        return {\n          id: nanoid(),\n          date: faker.date.between(pastDate, now).toISOString(),\n          message: template,\n          user: user.id,\n          read: false,\n          isNew: true,\n        }\n      })\n\n      return { notifications }\n    })\n  },\n  models: {\n    user: Model.extend({\n      posts: hasMany(),\n    }),\n    post: Model.extend({\n      user: belongsTo(),\n      comments: hasMany(),\n    }),\n    comment: Model.extend({\n      post: belongsTo(),\n    }),\n    notification: Model.extend({}),\n  },\n  factories: {\n    user: Factory.extend({\n      id() {\n        return nanoid()\n      },\n      firstName() {\n        return faker.name.firstName()\n      },\n      lastName() {\n        return faker.name.lastName()\n      },\n      name() {\n        return faker.name.findName(this.firstName, this.lastName)\n      },\n      username() {\n        return faker.internet.userName(this.firstName, this.lastName)\n      },\n\n      afterCreate(user, server) {\n        server.createList('post', 3, { user })\n      },\n    }),\n    post: Factory.extend({\n      id() {\n        return nanoid()\n      },\n      title() {\n        return sentence()\n      },\n      date() {\n        return faker.date.recent(7)\n      },\n      content() {\n        return article(1)\n      },\n      reactions() {\n        return {\n          thumbsUp: 0,\n          hooray: 0,\n          heart: 0,\n          rocket: 0,\n          eyes: 0,\n        }\n      },\n      afterCreate(post, server) {\n        //server.createList('comment', 3, { post })\n      },\n\n      user: association(),\n    }),\n    comment: Factory.extend({\n      id() {\n        return nanoid()\n      },\n      date() {\n        return faker.date.past(2)\n      },\n      text() {\n        return paragraph()\n      },\n      post: association(),\n    }),\n  },\n  serializers: {\n    user: IdSerializer,\n    post: IdSerializer,\n    comment: IdSerializer,\n  },\n  seeds(server) {\n    server.createList('user', 3)\n  },\n})\n","import { configureStore } from '@reduxjs/toolkit';\nimport postsReducer from '../features/posts/postsSlice';\nimport usersReducer from '../features/users/usersSlice';\nimport notificationsReducer from '../features/notifications/notificationsSlice';\n\nconst store = configureStore({\n  reducer: {\n    posts: postsReducer,\n    users: usersReducer,\n    notifications: notificationsReducer,\n  }\n});\n\nexport default store;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./app/store\";\nimport { Provider } from 'react-redux';\nimport \"./api/server\";\nimport { fetchUsers } from './features/users/usersSlice';\n\nstore.dispatch(fetchUsers());\n\nReactDOM.render(\n  <Provider store={store}>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}